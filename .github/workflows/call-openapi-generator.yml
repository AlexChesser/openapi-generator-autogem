name: OpenAPI Generator

on:
  push:
    branches:
      - main

jobs:
  version_details:
    outputs:
      version_current: ${{ steps.current.outputs.current }}
      version_next: ${{ steps.next.outputs.next }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}
      - name: Get tags
        run: git fetch --prune --tags origin
      - name: load current version
        id: version
        run: |
          # List git tags sorted based on semantic versioning
          GIT_TAGS=$(git tag --sort=version:refname)
          echo GIT_TAGS=$GIT_TAGS
          # Get last line of output which returns the
          # last tag (most recent version)
          GIT_TAG_LATEST=$(echo "$GIT_TAGS" | tail -n 1)
          echo GIT_TAG_LATEST=$GIT_TAG_LATEST
          # If no tag found, default to v0.0.0
          if [ -z "$GIT_TAG_LATEST" ]; then
            GIT_TAG_LATEST="v0.0.0"
          fi
          # Strip prefix 'v' from the tag to easily increment
          GIT_TAG_LATEST=$(echo "$GIT_TAG_LATEST" | sed 's/^v//')
          echo "GIT_TAG_LATEST=$GIT_TAG_LATEST" >> $GITHUB_ENV
      - name: load current version
        id: current
        run: |
          echo "current=${{ env.GIT_TAG_LATEST }}" >> "$GITHUB_OUTPUT"
      - name: increment version
        run: |
          GIT_TAG_LATEST=${{ env.GIT_TAG_LATEST }}
          echo $GIT_TAG_LATEST
          VERSION_NEXT="$(echo "$GIT_TAG_LATEST" | awk -F. '{$NF++; print $1"."$2"."$NF}')"
          echo "VERSION_NEXT=$VERSION_NEXT" >> $GITHUB_ENV
          echo VERSION_NEXT=$VERSION_NEXT
      - name: load next version
        id: next
        run: |
          echo "next=${{ env.VERSION_NEXT }}" >> "$GITHUB_OUTPUT"
  check_for_changes:
    runs-on: ubuntu-latest
    needs: version_details
    outputs:
      changed_files: ${{ steps.verify_diff.outputs.changed_files }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}
      - name: Run OpenAPI Generator
        run: |
          echo GIT_TAG_LATEST=${{needs.version_details.outputs.current}}
          docker run --rm \
            -v ${{ github.workspace }}:/local \
            openapitools/openapi-generator-cli:latest \
            java -jar /opt/openapi-generator/modules/openapi-generator-cli/target/openapi-generator-cli.jar \
            generate \
            -g ruby \
            -i https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/examples/v3.0/api-with-examples.json \
            -p packageName=my_client \
            -p gemVersion=${{needs.version_details.outputs.current}} \
            -p moduleName=MyClient \
            -p library=faraday \
            -o /local/my_client
      - name: Check if there are any changes
        id: verify_diff
        run: |
          git diff --quiet . || echo "changed_files=true" >> $GITHUB_OUTPUT
  generate:
    runs-on: ubuntu-latest
    needs: [ version_details, check_for_changes ]
    if: ${{ needs.check_for_changes.outputs.changed_files == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}
      - name: Regenerate OpenAPI client using new version
        if: env.CHANGED_FILES == 'true'
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/local \
            openapitools/openapi-generator-cli:latest \
            java -jar /opt/openapi-generator/modules/openapi-generator-cli/target/openapi-generator-cli.jar \
            generate \
            -g ruby \
            -i https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/examples/v3.0/api-with-examples.json \
            -p packageName=my_client \
            -p gemVersion=${{ needs.version_details.outputs.next }} \
            -p moduleName=MyClient \
            -p library=faraday \
            -o /local/my_client
      - name: commit to main
        if: env.CHANGED_FILES == 'true'
        run: |
          VERSION_NEXT=${{ needs.version_details.outputs.next }}
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add .
          git commit -m "Update soure files for version $VERSION_NEXT"
          git tag -a "v$VERSION_NEXT" -m "Release: v$VERSION_NEXT"
          echo git tag -a "v$VERSION_NEXT" -m "Release: v$VERSION_NEXT"
          echo git push origin main --follow-tags
      # - name: Install Ruby
      #   if: env.CHANGED_FILES == 'true'
      #   uses: ruby/setup-ruby@v1
      #   with:
      #     ruby-version: 3.0
      # - name: build gemVersion
      #   if: env.CHANGED_FILES == 'true'
      #   run: |
      #     cd my_client
      #     ls -al
      #     sudo gem build my_client.gemspec
      # - name: commit to main
      #   run: |
      #     git config --global user.email "github-actions[bot]@users.noreply.github.com"
      #     git config --global user.name "github-actions[bot]"
      #     git add .
      #     git commit -m "Update gemVersion"
      #     git push
