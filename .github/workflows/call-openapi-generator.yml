name: OpenAPI Generator

on:
  push:
    branches:
      - main

jobs:
  generate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}
      - name: load current version
        run: |
          # List git tags sorted based on semantic versioning
          GIT_TAGS=$(git tag --sort=version:refname)
          # Get last line of output which returns the
          # last tag (most recent version)
          GIT_TAG_LATEST=$(echo "$GIT_TAGS" | tail -n 1)
          # If no tag found, default to v0.0.0
          if [ -z "$GIT_TAG_LATEST" ]; then
            GIT_TAG_LATEST="v0.0.0"
          fi
          # Strip prefix 'v' from the tag to easily increment
          GIT_TAG_LATEST=$(echo "$GIT_TAG_LATEST" | sed 's/^v//')
          echo "GIT_TAG_LATEST=$GIT_TAG_LATEST" >> $GITHUB_ENV
      - name: Run OpenAPI Generator
        run: |
          echo GIT_TAG_LATEST=${{ env.GIT_TAG_LATEST }}
          docker run --rm \
            -v ${{ github.workspace }}:/local \
            openapitools/openapi-generator-cli:latest \
            java -jar /opt/openapi-generator/modules/openapi-generator-cli/target/openapi-generator-cli.jar \
            generate \
            -g ruby \
            -i https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/examples/v3.0/api-with-examples.json \
            -p packageName=my_client \
            -p gemVersion=${{ env.GIT_TAG_LATEST }} \
            -p moduleName=MyClient \
            -p library=faraday \
            -o /local/my_client
      - name: Detect changed files
        run: |
          CHANGED_FILES=$(git status --porcelain)
          echo $CHANGED_FILES
          if [ -z "$CHANGED_FILES" ]; then
            echo "No changes detected, exiting that's OK"
            exit 0
          fi
      - name: increment version
        run: |
          GIT_TAG_LATEST=${{ env.GIT_TAG_LATEST }}
          echo $GIT_TAG_LATEST
          VERSION_NEXT="$(echo "$GIT_TAG_LATEST" | awk -F. '{$NF++; print $1"."$2"."$NF}')"
          echo "VERSION_NEXT=$VERSION_NEXT" >> $GITHUB_ENV
          echo VERSION_NEXT=$VERSION_NEXT
      - name: Regenerate OpenAPI client using new version
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/local \
            openapitools/openapi-generator-cli:latest \
            java -jar /opt/openapi-generator/modules/openapi-generator-cli/target/openapi-generator-cli.jar \
            generate \
            -g ruby \
            -i https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/examples/v3.0/api-with-examples.json \
            -p packageName=my_client \
            -p gemVersion=${{ env.VERSION_NEXT }} \
            -p moduleName=MyClient \
            -p library=faraday \
            -o /local/my_client
      - name: commit to main
        run: |
          VERSION_NEXT=${{ env.VERSION_NEXT }}
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add .
          git commit -m "Update soure files for version $VERSION_NEXT"
          git tag -a "v$VERSION_NEXT" -m "Release: v$VERSION_NEXT"
          git push origin main --follow-tags
      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0
      - name: build gemVersion
        run: |
          cd my_client
          ls -al
          sudo gem build my_client.gemspec
      # - name: commit to main
      #   run: |
      #     git config --global user.email "github-actions[bot]@users.noreply.github.com"
      #     git config --global user.name "github-actions[bot]"
      #     git add .
      #     git commit -m "Update gemVersion"
      #     git push
