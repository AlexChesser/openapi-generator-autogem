name: OpenAPI Generator

env:
  OPEN_API_SPEC_URL: "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/examples/v3.0/api-with-examples.json"
  PACKAGE_NAME: "my_client"
  MODULE_NAME: "MyClient"
  GEM_PUBLISHER_NAME: "Gem Publisher Name"
  GEM_PUBLISHER_EMAIL: "example@example.com"
  GEM_PUBLISH_DESTINATION_URL: "https://rubygems.pkg.github.com/publisher_name"
  GEM_RELEASE_TOKEN: ${{ secrets.GEM_RELEASE_TOKEN }}

on:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches:
      - main

jobs:
  gather_version_info:
    outputs:
      current: ${{ steps.current.outputs.current }}
      next: ${{ steps.next.outputs.next }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}
      - name: Get tags
        run: git fetch --prune --tags origin
      - name: pull version information
        run: |
          # List git tags sorted based on semantic versioning
          GIT_TAGS=$(git tag --sort=version:refname)
          echo GIT_TAGS=$GIT_TAGS
          # Get last line of output which returns the
          # last tag (most recent version)
          GIT_TAG_LATEST=$(echo "$GIT_TAGS" | tail -n 1)
          echo GIT_TAG_LATEST=$GIT_TAG_LATEST
          # If no tag found, default to v0.0.0
          if [ -z "$GIT_TAG_LATEST" ]; then
            GIT_TAG_LATEST="v0.0.0"
          fi
          # Strip prefix 'v' from the tag to easily increment
          GIT_TAG_LATEST=$(echo "$GIT_TAG_LATEST" | sed 's/^v//')
          echo "GIT_TAG_LATEST=$GIT_TAG_LATEST" >> $GITHUB_ENV
      - name: load current version
        id: current
        run: |
          echo "current=${{ env.GIT_TAG_LATEST }}"
          echo "current=${{ env.GIT_TAG_LATEST }}" >> "$GITHUB_OUTPUT"
      - name: increment version
        run: |
          GIT_TAG_LATEST=${{ env.GIT_TAG_LATEST }}
          echo $GIT_TAG_LATEST
          VERSION_NEXT="$(echo "$GIT_TAG_LATEST" | awk -F. '{$NF++; print $1"."$2"."$NF}')"
          echo "VERSION_NEXT=$VERSION_NEXT" >> $GITHUB_ENV
          echo VERSION_NEXT=$VERSION_NEXT
      - name: load next version
        id: next
        run: |
          echo "next=${{ env.VERSION_NEXT }}" >> "$GITHUB_OUTPUT"

  check_for_changes:
    runs-on: ubuntu-latest
    needs: gather_version_info
    outputs:
      changed_files: ${{ steps.verify_diff.outputs.changed_files }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}
      - name: Run OpenAPI Generator
        run: |
          echo GIT_TAG_LATEST=${{needs.gather_version_info.outputs.current}}
          docker run --rm \
            -v ${{ github.workspace }}:/local \
            openapitools/openapi-generator-cli:latest \
            java -jar /opt/openapi-generator/modules/openapi-generator-cli/target/openapi-generator-cli.jar \
            generate \
            -g ruby \
            -i ${{ env.OPEN_API_SPEC_URL }} \
            -p packageName=${{ env.PACKAGE_NAME }} \
            -p gemVersion=${{needs.gather_version_info.outputs.current}} \
            -p moduleName=${{ env.MODULE_NAME }} \
            -p library=faraday \
            -o /local/${{ env.PACKAGE_NAME }}
      - name: Check if there are any changes
        id: verify_diff
        run: |
          ls -al
          git add .
          CHANGED_FILES=$(git diff --name-only --staged)
          echo $CHANGED_FILES
          if [ -z "$CHANGED_FILES" ]; then
            echo "No changes detected, exiting"
            exit 0
          fi
          echo "changed_files=true" >> $GITHUB_OUTPUT

  generate:
    runs-on: ubuntu-latest
    needs: [ gather_version_info, check_for_changes ]
    if: ${{ needs.check_for_changes.outputs.changed_files == 'true' }}
    steps:
      - name: confirm variables
        run: |
          echo changed_files ${{ needs.check_for_changes.outputs.changed_files }}
          echo current ${{ needs.gather_version_info.outputs.current }}
          echo next ${{ needs.gather_version_info.outputs.next }}
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}
      - name: Regenerate OpenAPI client using new version
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/local \
            openapitools/openapi-generator-cli:latest \
            java -jar /opt/openapi-generator/modules/openapi-generator-cli/target/openapi-generator-cli.jar \
            generate \
            -g ruby \
            -i ${{ env.OPEN_API_SPEC_URL }} \
            -p packageName=${{ env.PACKAGE_NAME }} \
            -p gemVersion=${{ needs.gather_version_info.outputs.next }} \
            -p moduleName=${{ env.MODULE_NAME }} \
            -p library=faraday \
            -o /local/${{ env.PACKAGE_NAME }}
      - name: commit to main
        run: |
          VERSION_NEXT=${{ needs.gather_version_info.outputs.next }}
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add .
          git commit -m "Update soure files for version $VERSION_NEXT"
          git tag -a "v$VERSION_NEXT" -m "Release: v$VERSION_NEXT"
          echo git tag -a "v$VERSION_NEXT" -m "Release: v$VERSION_NEXT"
          git push origin main --follow-tags
      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0
      - name: build gemVersion
        run: |
          ls -al
          echo cd ${{ env.PACKAGE_NAME }}
          cd ${{ env.PACKAGE_NAME }}
          echo sudo gem build ${{ env.PACKAGE_NAME }}.gemspec
          sudo gem build ${{ env.PACKAGE_NAME }}.gemspec
          ls -al
      # - name: Release Gem
      #   run: |
      #     git config --global --add safe.directory $(realpath .)
      #     git config user.email ${{ env.GEM_PUBLISHER_EMAIL }}
      #     git config user.name ${{ env.GEM_PUBLISHER_NAME }}
      #     mkdir -p $HOME/.gem
      #     printf "%s\n" "${{ env.GEM_PUBLISH_DESTINATION_URL }}: Bearer ${{ env.GEM_RELEASE_TOKEN }}" > $HOME/.gem/credentials
      #     chmod 0600 $HOME/.gem/credentials
      #     gem push *.gem
